{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst js_base64_1 = require(\"js-base64\");\nconst parser = __importStar(require(\"fast-xml-parser\"));\nfunction parsePath(key, pic) {\n    if (pic.indexOf('/') === 0) {\n        return pic;\n    }\n    const idx = key.lastIndexOf('/');\n    if (idx === -1) {\n        return pic;\n    }\n    return key.slice(0, idx + 1) + pic;\n}\nconst ActionType = {\n    DetectLabel: 'DetectLabel',\n    DetectType: 'DetectType',\n    WaterMark: 'WaterMark',\n    ImageProcess: 'ImageProcess'\n};\nfunction callFunction(tcb, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let ciRes;\n        try {\n            ciRes = yield tcb.callFunction(options);\n        }\n        catch (err) {\n            let errMessage = `[@cloudbase/extension-ci] 调用扩展函数失败 ;  ${err.code ? err.code : ''} ${err.message ? err.message : ''}`;\n            if (err.message && err.message.indexOf('找不到对应的FunctionName') > -1) {\n                throw new Error('[@cloudbase/extension-ci] 请确认扩展已安装');\n            }\n            if (err.errMsg && err.errMsg.indexOf('找不到对应的FunctionName') > -1) {\n                errMessage = '[@cloudbase/extension-ci] 请确认扩展已安装';\n            }\n            throw new Error(errMessage);\n        }\n        if (ciRes.code) {\n            if (ciRes.message && ciRes.message.indexOf('找不到对应的FunctionName') > -1) {\n                throw new Error('[@cloudbase/extension-ci] 请确认扩展已安装');\n            }\n            throw new Error(`[@cloudbase/extension-ci] 调用扩展函数失败 ;  ${ciRes.requestId ? ciRes.requestId : ''} ; ${ciRes.code} ; ${ciRes.message}`);\n        }\n        const { code } = ciRes.result || {};\n        if (code) {\n            throw new Error(`[@cloudbase/extension-ci] ${code} ; ${ciRes.requestId ? ciRes.requestId : ''} ;`);\n        }\n        return ciRes.result;\n    });\n}\nexports.name = 'CloudInfinite';\nfunction invoke(opts, tcb) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let { cloudPath, fileContent, action, operations } = opts;\n        if (!action || !ActionType[action]) {\n            throw new Error('[@cloudbase/extension-ci] action必须为正确的值');\n        }\n        cloudPath = cloudPath.indexOf('/') === 0 ? cloudPath.slice(1) : cloudPath;\n        const headers = {};\n        let method;\n        if (fileContent) {\n            if (!(fileContent instanceof Uint8Array || fileContent instanceof ArrayBuffer)) {\n                throw new Error('[@cloudbase/extension-ci] fileContent一定要是Uint8Array对象或者ArrayBuffer对象');\n            }\n        }\n        let query;\n        if (action === ActionType.DetectLabel) {\n            method = 'GET';\n            query = {\n                'ci-process': 'detect-label'\n            };\n        }\n        else if (action === ActionType.DetectType) {\n            method = 'GET';\n            if (!operations.type) {\n                throw new Error('[@cloudbase/extension-ci] DetectType是，type字段不为空');\n            }\n            query = {\n                'ci-process': 'sensitive-content-recognition',\n                'detect-type': operations.type\n            };\n            delete operations.type;\n        }\n        else if (action === ActionType.ImageProcess) {\n            query = 'image_process';\n            method = 'POST';\n            if (fileContent) {\n                method = 'PUT';\n                query = undefined;\n            }\n        }\n        else if (action === ActionType.WaterMark) {\n            method = fileContent ? 'PUT' : 'POST';\n            if (method === 'POST') {\n                query = 'image_process';\n            }\n            operations.rules.some((rule) => {\n                if (typeof rule !== 'object') {\n                    throw new Error('[@cloudbase/extension-ci] WaterMark,rule必须为对象');\n                }\n            });\n            for (const processRule of operations.rules) {\n                const { rule } = processRule;\n                if ((rule.type === 1 || rule.type === 2) && rule.image) {\n                    if (rule.image.indexOf('/') === 0) {\n                        rule.image = rule.image.slice(1);\n                    }\n                    processRule.rule = `watermark/${rule.mode}/type/${rule.type}/image/${rule.image}`;\n                }\n                else if (rule.type === 3 && rule.text) {\n                    processRule.rule = `watermark/${rule.mode}/type/${rule.type}/text/${js_base64_1.Base64.encode(rule.text).replace(/\\//g, '_').replace(/=/g, '').replace(/\\+/g, '-')}`;\n                }\n                else {\n                    throw new Error('[@cloudbase/extension-ci] WaterMark,rule参数错误');\n                }\n            }\n        }\n        if (operations) {\n            headers['Pic-Operations'] = JSON.stringify(operations);\n        }\n        const functionOpts = {\n            name: 'tcb_extension_ci',\n            data: {\n                key: cloudPath,\n                action,\n                query: typeof query === 'object' ? query : null,\n                headers,\n                method\n            }\n        };\n        const ciRes = yield callFunction(tcb, functionOpts);\n        let { authorization, token, url, headers: headerRes, cosFileId } = ciRes || {};\n        let options;\n        if (method === 'PUT') {\n            if (!cosFileId) {\n                const metaDataRes = yield tcb.getUploadMetadata({ cloudPath });\n                cosFileId = metaDataRes.data.cosFileId;\n            }\n            options = {\n                url,\n                headers: Object.assign(Object.assign({}, headerRes), { 'x-cos-security-token': token, 'x-cos-meta-fileid': cosFileId, Authorization: authorization }),\n                method,\n                body: fileContent\n            };\n        }\n        else {\n            if (method === 'POST') {\n                const fileIds = operations.rules.map((rule) => rule.fileid).filter((fileid) => !!fileid);\n                if (fileIds && fileIds.length > 0) {\n                    let filePath = parsePath(cloudPath, fileIds[0]);\n                    filePath = filePath.indexOf('/') === 0 ? filePath.slice(1) : filePath;\n                    if (!cosFileId) {\n                        const metaDataRes = yield tcb.getUploadMetadata({ cloudPath: filePath });\n                        cosFileId = metaDataRes.data.cosFileId;\n                    }\n                }\n            }\n            let newUrl;\n            let queryStr;\n            if (query && typeof query === 'object') {\n                queryStr = Object.keys(query).map((key) => `${key}=${query[key]}`).join('&');\n            }\n            else if (query && typeof query === 'string') {\n                queryStr = query;\n            }\n            newUrl = url;\n            if (url.indexOf('?') > -1) {\n                newUrl += `&${queryStr}`;\n            }\n            else {\n                newUrl += `?${queryStr}`;\n            }\n            options = {\n                url: newUrl,\n                headers: Object.assign(Object.assign({}, headerRes), { Authorization: authorization, 'x-cos-security-token': token }),\n                method: method.toUpperCase()\n            };\n            if (method === 'POST' && cosFileId) {\n                options.headers['x-cos-meta-fileid'] = cosFileId;\n            }\n        }\n        const body = yield tcb.requestClient[method.toLowerCase()](options);\n        if (body && body.data) {\n            const parseRes = parser.parse(body.data);\n            if (parseRes && parseRes.UploadResult && parseRes.UploadResult.OriginalInfo && parseRes.UploadResult.OriginalInfo.Location) {\n                parseRes.UploadResult.OriginalInfo.Location = parseRes.UploadResult.OriginalInfo.Location.replace(/cos\\.ap-([a-z]+)\\.myqcloud\\.com/, 'tcb.qcloud.la');\n            }\n            if (parseRes && parseRes.UploadResult && parseRes.UploadResult.ProcessResults\n                && parseRes.UploadResult.ProcessResults.Object && parseRes.UploadResult.ProcessResults.Object.Location) {\n                parseRes.UploadResult.ProcessResults.Object.Location = parseRes.UploadResult.ProcessResults.Object.Location.replace(/cos\\.ap-([a-z]+)\\.myqcloud\\.com/, 'tcb.qcloud.la');\n            }\n            body.data = parseRes;\n        }\n        return body;\n    });\n}\nexports.invoke = invoke;\n"]}